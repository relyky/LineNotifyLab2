@* GET /notifyback?code=evTbViQRQfV0tJLqscBJRP&state=abcdefghijklmnopqrstuvwxyz *@
@page "/notifyback"
@inject IHttpClientFactory httpFactory
@inject NavigationManager navSvc
@* @inject ProtectedLocalStorage localStore *@
@inject LineNotifyRepoService notifyRepo

<PageTitle>LINE Notify callback</PageTitle>

<h1>LINE Notify callback</h1>

<h6>Query Parameters</h6>
<ul>
  <li>code: @QueryCode</li>
  <li>state: @QueryState \ @(System.Text.Encoding.UTF8.GetString(Convert.FromBase64String(QueryState))) </li>
</ul>

<h6>Line Notify Setting</h6>
<pre>
  @JsonSerializer.Serialize(notifySetting, jsonOptions)
</pre>

@* <button class="btn btn-primary" @onclick=HandleNotifyToken>取得 LINE Notify access token</button> *@

@if (f_loading)
{
  <div class="progress my-3">
    <div class="progress-bar progress-bar-striped progress-bar-animated" style="width: 100%"></div>
  </div>
}

@if (errMsg != null)
{
  <div class="alert alert-danger my-3" role="alert">
    @errMsg
  </div>
}

@if(tokenResult != null)
{
  <div class=@($"alert {(tokenResult.status == 200 ? "alert-success" : "alert-danger")} my-3") role="alert">
    @JsonSerializer.Serialize(tokenResult, jsonOptions)
  </div>
}

@code {
  [Parameter]
  [SupplyParameterFromQuery(Name = "code")]
  public string QueryCode { get; set; } = string.Empty;

  [Parameter]
  [SupplyParameterFromQuery(Name = "state")]
  public string QueryState { get; set; } = string.Empty;

  //## Resource
  System.Text.Json.JsonSerializerOptions jsonOptions = new System.Text.Json.JsonSerializerOptions
    {
      WriteIndented = true,
      Encoder = System.Text.Encodings.Web.JavaScriptEncoder.UnsafeRelaxedJsonEscaping
    };

  //## State
  string? errMsg = null;
  bool f_loading = false;
  LineNotifyTokenResponse? tokenResult = null;
  LineNotifyData? notifySetting = null;

  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    if (firstRender)
    {
      //var result = await localStore.GetAsync<LineNotifyData>(nameof(LineNotifyData));
      //notifySetting = result.Success ? result.Value! : new LineNotifyData();
      var result = await notifyRepo.GetAsync();
      notifySetting = result ?? new LineNotifyData();
      StateHasChanged();

      await HandleNotifyToken();
      StateHasChanged();
    }
  }

  async Task HandleNotifyToken()
  {
    // curl -d "grant_type=authorization_code&redirect_uri=https://d237-211-72-195-28.ngrok-free.app&client_id=wpO642hWhtyWEi6OSIOwJY&client_secret=eX6DoCyvESUmFFKJvIPrS0oDAvvqXIRnBEyXgka6zeO&code=Ia80TDvpbvukJqQkSjRGco" https://notify-bot.line.me/oauth/token
    // {
    //   "status" : 200,
    //   "message" : "access_token is issued",
    //   "access_token" : "tzioDv8RXCo1LZ1qj08WPjeCjmWoRLPYK2wyOFp8GJG"
    // }

    try
    {
      errMsg = null;
      f_loading = true;
      tokenResult = null;

      using var _http = httpFactory.CreateClient();
      _http.BaseAddress = new Uri($"https://notify-bot.line.me");

      //# 組織 notify uri.
      var tokenUri = new UriBuilder(_http.BaseAddress);
      tokenUri.Path = "oauth/token";

      // uri-query
      List<string> queryItems = new List<string>();
      queryItems.Add($"grant_type=authorization_code");
      queryItems.Add($"client_id={notifySetting?.ClientID}");
      queryItems.Add($"client_secret={notifySetting?.ClientSecret}");
      queryItems.Add($"redirect_uri={notifySetting?.RedirectUri}");
      queryItems.Add($"code={QueryCode}");
      tokenUri.Query = String.Join("&", queryItems);

      using var resp = await _http.PostAsync(tokenUri.Uri, new StringContent(string.Empty));
      var json = await resp.Content.ReadAsStringAsync();
      tokenResult = JsonSerializer.Deserialize<LineNotifyTokenResponse>(json);

      if(tokenResult!.status == 200)
      {
        // 儲存 AccessToken
        notifySetting!.AccessToken = tokenResult.access_token;
        //await localStore.SetAsync(nameof(LineNotifyData), notifySetting);
        await notifyRepo.SetAsync(notifySetting);
      }
    }
    catch (Exception ex)
    {
      errMsg = "發送 LINE Notify 出現例外！" + ex.Message;
    }
    finally
    {
      f_loading = false;
    }
  }
}
